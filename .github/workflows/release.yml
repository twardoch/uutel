name: Release

on:
  push:
    tags: ["v*"]

permissions:
  contents: write
  id-token: write

jobs:
  release:
    name: Release to PyPI
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/uutel
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: "3.12"
          enable-cache: true

      - name: Install dependencies and build tools
        run: |
          uv sync --all-extras
          uv pip install build hatchling hatch-vcs twine

      - name: Run pre-release validation
        run: |
          echo "üîç Running comprehensive pre-release validation..."

          echo "1. Distribution validation..."
          uv run python -c "
          from uutel.core.distribution import validate_pypi_readiness, get_distribution_summary
          print('Running distribution validation...')
          summary = get_distribution_summary()
          print(f'Distribution status: {summary[\"status\"]}')
          print(f'Checks passed: {summary[\"checks_passed\"]}/{summary[\"total_checks\"]}')
          if summary[\"failed_checks\"]:
            print(f'Failed checks: {summary[\"failed_checks\"]}')

          is_ready = validate_pypi_readiness()
          if not is_ready:
            print('‚ùå Package is not ready for PyPI release')
            exit(1)
          else:
            print('‚úÖ Package is ready for PyPI release')
          "

          echo "2. Production readiness validation..."
          uv run python -c "
          from uutel.core.health import validate_production_readiness, get_health_summary
          print('Running health validation...')
          summary = get_health_summary()
          print(f'Health status: {summary[\"status\"]}')
          print(f'Checks passed: {summary[\"checks_passed\"]}/{summary[\"total_checks\"]}')
          if summary[\"failed_checks\"]:
            print(f'Failed checks: {summary[\"failed_checks\"]}')

          is_ready = validate_production_readiness()
          if not is_ready:
            print('‚ùå Package is not ready for production')
            exit(1)
          else:
            print('‚úÖ Package is ready for production')
          "

      - name: Build distributions
        run: uv run python -m build --outdir dist

      - name: Verify distribution files
        run: |
          echo "üì¶ Verifying built distributions..."
          ls -la dist/

          # Check that both wheel and source distribution exist
          test -n "$(find dist -name '*.whl')" || (echo "‚ùå Wheel file missing" && exit 1)
          test -n "$(find dist -name '*.tar.gz')" || (echo "‚ùå Source distribution missing" && exit 1)

          # Use twine to check package integrity
          uv run twine check dist/*

          echo "‚úÖ All distribution files verified"

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
