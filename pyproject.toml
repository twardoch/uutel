# this_file: pyproject.toml
#==============================================================================
# UUTEL PACKAGE CONFIGURATION
# Universal AI Provider for LiteLLM - extends LiteLLM with Claude Code, Gemini CLI,
# Google Cloud Code, and OpenAI Codex providers
#==============================================================================

#------------------------------------------------------------------------------
# PROJECT METADATA
#------------------------------------------------------------------------------
[project]
name = "uutel"
description = "Universal AI Provider for LiteLLM - extends LiteLLM with custom providers"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Adam Twardoch", email = "adam+github@twardoch.com"},
]
keywords = [
    "ai", "llm", "litellm", "claude", "gemini", "codex", "openai",
    "providers", "universal", "anthropic", "google"
]
dynamic = ["version"]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

# Core dependencies for UUTEL functionality
dependencies = [
    "litellm>=1.70.0",
    "httpx>=0.25.0",
    "aiohttp>=3.8.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "loguru>=0.7.0",
]

# Project URLs
[project.urls]
Documentation = "https://github.com/twardoch/uutel#readme"
Issues = "https://github.com/twardoch/uutel/issues"
Source = "https://github.com/twardoch/uutel"
Homepage = "https://github.com/twardoch/uutel"

#------------------------------------------------------------------------------
# OPTIONAL DEPENDENCIES
#------------------------------------------------------------------------------
[project.optional-dependencies]

# Authentication dependencies
auth = [
    "google-auth>=2.15.0",
    "google-auth-oauthlib>=1.0.0",
    "google-cloud-core>=2.0.0",
]

# CLI dependencies
cli = [
    "typer>=0.9.0",
    "rich>=13.0.0",
]

# Development tools
dev = [
    "ruff>=0.9.7",
    "mypy>=1.15.0",
    "pre-commit>=4.1.0",
]

# Testing framework
test = [
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-xdist>=3.6.1",
    "pytest-asyncio>=0.25.3",
    "pytest-mock>=3.15.0",
    "coverage[toml]>=7.6.12",
]

# All optional dependencies
all = ["uutel[auth,cli]"]

#------------------------------------------------------------------------------
# BUILD SYSTEM CONFIGURATION
#------------------------------------------------------------------------------
[build-system]
requires = [
    "hatchling>=1.27.0",
    "hatch-vcs>=0.4.0",
]
build-backend = "hatchling.build"

#------------------------------------------------------------------------------
# HATCH CONFIGURATION
#------------------------------------------------------------------------------

# Hatch build configuration
[tool.hatch.build.targets.wheel]
packages = ["src/uutel"]

# Hatch versioning configuration
[tool.hatch.version]
source = "vcs"

# Hatch VCS version configuration
[tool.hatch.build.hooks.vcs]
version-file = "src/uutel/_version.py"

#------------------------------------------------------------------------------
# HATCH ENVIRONMENTS
#------------------------------------------------------------------------------

[tool.hatch.envs.default]
extra-dependencies = [
    "ruff>=0.9.7",
    "mypy>=1.15.0",
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=src/uutel --cov-report=term-missing {args:tests}"
lint = "ruff check {args:src/uutel tests}"
format = "ruff format {args:src/uutel tests}"
check = ["lint", "format"]
typecheck = "mypy {args:src/uutel tests}"

#------------------------------------------------------------------------------
# TESTING CONFIGURATION
#------------------------------------------------------------------------------

[tool.pytest.ini_options]
addopts = "-v --tb=short"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
asyncio_default_fixture_loop_scope = "function"

#------------------------------------------------------------------------------
# COVERAGE CONFIGURATION
#------------------------------------------------------------------------------

[tool.coverage.run]
source = ["src/uutel"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
]

#------------------------------------------------------------------------------
# RUFF CONFIGURATION
#------------------------------------------------------------------------------

[tool.ruff]
target-version = "py310"
line-length = 88
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "RUF",    # Ruff-specific rules
]
ignore = []

[tool.ruff.lint.isort]
known-first-party = ["uutel"]

#------------------------------------------------------------------------------
# MYPY CONFIGURATION
#------------------------------------------------------------------------------

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
warn_unreachable = true
warn_unused_ignores = true
show_error_codes = true
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true

# Allow some flexibility with third-party libraries
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "uutel.core.base"
# LiteLLM interface has complex type compatibility issues
disable_error_code = ["override", "arg-type", "no-untyped-def", "type-arg"]

[[tool.mypy.overrides]]
module = "litellm.*"
ignore_errors = true